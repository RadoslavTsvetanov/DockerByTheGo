// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v3.21.12
// source: workloadApi.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "workloadApi";

export interface WorkloadRequest {
  channelId: string;
}

export interface WorkloadResponse {
  /** Use a field number instead of a string literal */
  WorkloadHandlerUrl: string;
}

function createBaseWorkloadRequest(): WorkloadRequest {
  return { channelId: "" };
}

export const WorkloadRequest: MessageFns<WorkloadRequest> = {
  encode(message: WorkloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channelId !== "") {
      writer.uint32(10).string(message.channelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadRequest {
    return { channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "" };
  },

  toJSON(message: WorkloadRequest): unknown {
    const obj: any = {};
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkloadRequest>, I>>(base?: I): WorkloadRequest {
    return WorkloadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkloadRequest>, I>>(object: I): WorkloadRequest {
    const message = createBaseWorkloadRequest();
    message.channelId = object.channelId ?? "";
    return message;
  },
};

function createBaseWorkloadResponse(): WorkloadResponse {
  return { WorkloadHandlerUrl: "" };
}

export const WorkloadResponse: MessageFns<WorkloadResponse> = {
  encode(message: WorkloadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.WorkloadHandlerUrl !== "") {
      writer.uint32(10).string(message.WorkloadHandlerUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkloadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkloadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.WorkloadHandlerUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkloadResponse {
    return { WorkloadHandlerUrl: isSet(object.WorkloadHandlerUrl) ? globalThis.String(object.WorkloadHandlerUrl) : "" };
  },

  toJSON(message: WorkloadResponse): unknown {
    const obj: any = {};
    if (message.WorkloadHandlerUrl !== "") {
      obj.WorkloadHandlerUrl = message.WorkloadHandlerUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkloadResponse>, I>>(base?: I): WorkloadResponse {
    return WorkloadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkloadResponse>, I>>(object: I): WorkloadResponse {
    const message = createBaseWorkloadResponse();
    message.WorkloadHandlerUrl = object.WorkloadHandlerUrl ?? "";
    return message;
  },
};

export type YourServiceService = typeof YourServiceService;
export const YourServiceService = {
  createWorload: {
    path: "/workloadApi.YourService/createWorload",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: WorkloadRequest) => Buffer.from(WorkloadRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => WorkloadRequest.decode(value),
    responseSerialize: (value: WorkloadResponse) => Buffer.from(WorkloadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => WorkloadResponse.decode(value),
  },
} as const;

export interface YourServiceServer extends UntypedServiceImplementation {
  createWorload: handleUnaryCall<WorkloadRequest, WorkloadResponse>;
}

export interface YourServiceClient extends Client {
  createWorload(
    request: WorkloadRequest,
    callback: (error: ServiceError | null, response: WorkloadResponse) => void,
  ): ClientUnaryCall;
  createWorload(
    request: WorkloadRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: WorkloadResponse) => void,
  ): ClientUnaryCall;
  createWorload(
    request: WorkloadRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: WorkloadResponse) => void,
  ): ClientUnaryCall;
}

export const YourServiceClient = makeGenericClientConstructor(
  YourServiceService,
  "workloadApi.YourService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): YourServiceClient;
  service: typeof YourServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
